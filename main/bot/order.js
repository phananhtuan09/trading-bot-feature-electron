const StateManager = require('../database/stateStore');
const ConfigManager = require('../database/configStore');
const BinanceService = require('./binanceService');
const { sendOrderMessage } = require('./sendMessage');

class Order {
  constructor() {
    this.isRunning = false;
    this.stateManager = new StateManager();
    this.configManager = new ConfigManager();
    this.binanceService = new BinanceService();
    this.mainWindow = null;
  }

  setMainWindow(window) {
    this.mainWindow = window;
  }

  sendNotification(message, type = 'info') {
    if (this.mainWindow) {
      this.mainWindow.webContents.send('order:notification', { message, type });
    }
  }

  // Ki·ªÉm tra xem c·∫∑p giao d·ªãch c√≥ v·ªã th·∫ø ƒëang m·ªü hay kh√¥ng
  async checkExistingPosition(symbol) {
    try {
      const positions = await this.binanceService.getPositions();
      return positions.some(p => p.symbol === symbol && Math.abs(p.positionAmt) > 0);
    } catch (error) {
      console.error(`L·ªói ki·ªÉm tra v·ªã th·∫ø: ${error}`);
      return false;
    }
  }

  // ƒê·∫∑t l·ªánh giao d·ªãch d·ª±a tr√™n t√≠n hi·ªáu
  async placeOrder(signal) {
    const { symbol, price, decision } = signal;
    const { sendErrorAlert } = require('./sendMessage');

    try {
      // Ki·ªÉm tra margin type
      await this.setMarginType(symbol);

      // ƒê·∫∑t l·ªánh ch√≠nh
      const { quantity, side } = await this.prepareOrder(symbol, price, decision);
      const orderResult = await this.binanceService.placeOrder({
        symbol,
        side,
        type: 'MARKET',
        quantity,
      });

      if (!orderResult.success) {
        throw new Error(orderResult.error);
      }

      // L·∫•y TP/SL t·ª´ settings thay v√¨ t·ª´ signal
      const orderSettings = this.configManager.getConfig().ORDER_SETTINGS;
      const TP_ROI = orderSettings.TAKE_PROFIT_PERCENT || 4;
      const SL_ROI = orderSettings.STOP_LOSS_PERCENT || 2;

      // ƒê·∫∑t TP/SL
      const { tpPrice, slPrice } = await this.setTPSL(symbol, side, price, TP_ROI, SL_ROI);

      // Update state
      this.stateManager.addPosition({
        symbol,
        side: decision,
        entryPrice: price,
        stopLoss: slPrice,
        takeProfit: tpPrice,
        status: 'active',
        quantity,
      });

      const successMsg = `‚úÖ ƒê√£ v√†o l·ªánh ${decision.toUpperCase()} ${symbol} | Gi√°: ${price.toFixed(4)} | KL: ${quantity}`;
      console.log(`üìà ${successMsg} | SL: ${slPrice.toFixed(4)} | TP: ${tpPrice.toFixed(4)}`);

      // Send success notification to UI
      this.sendNotification(successMsg, 'success');

      // Send order notification to Discord/Telegram
      await sendOrderMessage({
        symbol,
        side,
        price,
        quantity,
        tpPrice,
        slPrice,
        leverage: this.configManager.getConfig().ORDER_SETTINGS?.LEVERAGE || 20,
      });

      return true;
    } catch (error) {
      const errorMsg = `‚ùå L·ªói ƒë·∫∑t l·ªánh ${symbol}: ${error.message}`;
      console.error(`üî¥ ${errorMsg}`);

      // Send error notification to UI
      this.sendNotification(errorMsg, 'error');

      // Send error notification to Telegram/Discord
      await sendErrorAlert(errorMsg);

      return false;
    }
  }

  // Thi·∫øt l·∫≠p lo·∫°i margin (ISOLATED) cho c·∫∑p giao d·ªãch
  async setMarginType(symbol) {
    const result = await this.binanceService.setMarginType(symbol, 'ISOLATED');

    // If margin type is already set correctly, that's fine - don't throw error
    if (result.success || result.message?.includes('already')) {
      return; // Success or already set
    }

    if (!result.success && !result.isTimeout && !result.isTimestampError) {
      // Only throw if it's a critical error (not timeout or timestamp error)
      const errorMsg = `L·ªói set margin type cho ${symbol}: ${result.error}`;
      console.error(`üî¥ ${errorMsg}`);
      throw new Error(errorMsg);
    }

    // If it's a timeout, log warning but continue
    if (result.isTimeout) {
      console.warn(`‚ö†Ô∏è Timeout setting margin type for ${symbol}, but continuing...`);
    }

    // If it's a timestamp error, log warning but continue
    if (result.isTimestampError) {
      console.warn(
        `‚ö†Ô∏è Timestamp error setting margin type for ${symbol} - please check system clock`
      );
    }
  }

  // T√≠nh s·ªë l∆∞·ª£ng giao d·ªãch d·ª±a tr√™n gi√° v√† c·∫•u h√¨nh
  async prepareOrder(symbol, price, decision) {
    const quantity = await this.calculateQuantity(symbol, price);
    if (quantity <= 0) {
      const quantityError = 'S·ªë l∆∞·ª£ng kh√¥ng h·ª£p l·ªá';
      throw new Error(quantityError);
    }

    const orderSettings = this.stateManager.getOrdersState();
    const leverage = orderSettings.leverage || 20;

    const leverageResult = await this.binanceService.setLeverage(symbol, leverage);
    if (!leverageResult.success && !leverageResult.isTimeout && !leverageResult.isTimestampError) {
      throw new Error(`Failed to set leverage for ${symbol}: ${leverageResult.error}`);
    }

    if (leverageResult.isTimeout) {
      console.warn(`‚ö†Ô∏è Timeout setting leverage for ${symbol}, but continuing...`);
    }

    if (leverageResult.isTimestampError) {
      console.warn(`‚ö†Ô∏è Timestamp error setting leverage for ${symbol} - please check system clock`);
    }

    return {
      quantity,
      side: decision === 'Long' ? 'BUY' : 'SELL',
    };
  }

  async calculateQuantity(symbol, price) {
    let stepSize;
    try {
      const client = this.binanceService.client;
      const exchangeInfo = await client.futuresExchangeInfo();
      const symbolInfo = exchangeInfo.symbols.find(s => s.symbol === symbol);

      if (!symbolInfo) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y th√¥ng tin cho symbol: ${symbol}`);
      }

      const lotSizeFilter = symbolInfo.filters.find(f => f.filterType === 'LOT_SIZE');
      if (!lotSizeFilter || !lotSizeFilter.stepSize) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y stepSize cho symbol: ${symbol}`);
      }

      stepSize = parseFloat(lotSizeFilter.stepSize);
    } catch (error) {
      console.error(`‚ö†Ô∏è Failed to get exchange info for ${symbol}:`, error.message);
      throw new Error(`Kh√¥ng th·ªÉ l·∫•y th√¥ng tin s√†n giao d·ªãch: ${error.message}`);
    }

    const orderSettings = this.stateManager.getOrdersState();
    const quantityPerOrder = orderSettings.quantity || 10;
    const leverage = orderSettings.leverage || 20;

    // T√≠nh to√°n s·ªë l∆∞·ª£ng ch√≠nh x√°c v·ªõi l√†m tr√≤n xu·ªëng
    const rawQty = (quantityPerOrder * leverage) / price;
    const quantity = Math.floor(rawQty / stepSize) * stepSize;

    return quantity;
  }

  // Thi·∫øt l·∫≠p gi√° ch·ªët l·ªùi (TP) v√† c·∫Øt l·ªó (SL)
  async setTPSL(symbol, side, entryPrice, TP_ROI, SL_ROI) {
    try {
      // Calculate TP/SL prices
      const { tp: tpPriceRaw, sl: slPriceRaw } = this.calculateTpSlPrices({
        entryPrice,
        tpRoiPercent: TP_ROI,
        slRoiPercent: Math.abs(SL_ROI),
        side,
      });

      // Get tickSize from exchange info
      let symbolInfo;
      try {
        const client = this.binanceService.client;
        const exchangeInfo = await client.futuresExchangeInfo();
        symbolInfo = exchangeInfo.symbols.find(s => s.symbol === symbol);
      } catch (error) {
        console.error(`‚ö†Ô∏è Failed to get exchange info for ${symbol}:`, error.message);
        throw new Error(`Kh√¥ng th·ªÉ l·∫•y th√¥ng tin s√†n giao d·ªãch: ${error.message}`);
      }

      const priceFilter = symbolInfo.filters.find(f => f.filterType === 'PRICE_FILTER');
      const tickSize = parseFloat(priceFilter.tickSize);

      // Round prices to tickSize
      const roundToTickSize = (price, tickSizeValue) => {
        const precision = -Math.floor(Math.log10(tickSizeValue));
        return Number(price.toFixed(precision));
      };

      const tpPrice = roundToTickSize(tpPriceRaw, tickSize);
      const slPrice = roundToTickSize(slPriceRaw, tickSize);

      // Place TP/SL orders
      await this.placeTPSLOrder(symbol, side, tpPrice, 'TAKE_PROFIT_MARKET');
      await this.placeTPSLOrder(symbol, side, slPrice, 'STOP_MARKET');

      return { tpPrice, slPrice };
    } catch (error) {
      console.error(`L·ªói ƒë·∫∑t TP/SL cho ${symbol}: ${error}`);
      throw error;
    }
  }

  // T√≠nh gi√° TP v√† SL d·ª±a tr√™n ROI v√† h∆∞·ªõng l·ªánh
  calculateTpSlPrices({ entryPrice, tpRoiPercent, slRoiPercent, side }) {
    const orderSettings = this.stateManager.getOrdersState();
    const leverage = orderSettings.leverage || 20;

    const tpChange = tpRoiPercent / leverage / 100;
    const slChange = slRoiPercent / leverage / 100;

    let tpPrice, slPrice;
    if (side === 'BUY') {
      tpPrice = entryPrice * (1 + tpChange);
      slPrice = entryPrice * (1 - slChange);
    } else {
      tpPrice = entryPrice * (1 - tpChange);
      slPrice = entryPrice * (1 + slChange);
    }

    return { tp: tpPrice, sl: slPrice };
  }

  // ƒê·∫∑t l·ªánh TP ho·∫∑c SL tr√™n Binance
  async placeTPSLOrder(symbol, side, price, type) {
    const orderSide = side === 'BUY' ? 'SELL' : 'BUY';
    const client = this.binanceService.client;

    // Get tickSize to format stopPrice
    const symbolInfo = (await client.futuresExchangeInfo()).symbols.find(s => s.symbol === symbol);
    const priceFilter = symbolInfo.filters.find(f => f.filterType === 'PRICE_FILTER');
    const tickSize = parseFloat(priceFilter.tickSize);
    const precision = -Math.floor(Math.log10(tickSize));
    const formattedPrice = Number(price.toFixed(precision));

    const order = await client.futuresOrder({
      symbol,
      side: orderSide,
      type,
      stopPrice: formattedPrice,
      closePosition: true,
    });

    return order;
  }

  // Th·ª±c thi qu√° tr√¨nh qu√©t t√≠n hi·ªáu v√† ƒë·∫∑t l·ªánh
  async execute() {
    if (!this.isRunning) {
      return;
    }

    try {
      // L·∫•y t√≠n hi·ªáu t·ª´ StateManager
      const signals = this.stateManager.getSignals();
      if (!signals || signals.length === 0) {
        console.log('Kh√¥ng c√≥ t√≠n hi·ªáu n√†o ƒë·ªÉ giao d·ªãch.');
        this.sendNotification('‚ÑπÔ∏è Kh√¥ng c√≥ t√≠n hi·ªáu n√†o ƒë·ªÉ giao d·ªãch', 'info');
        return;
      }

      // Filter signals without existing positions
      const validSignals = [];
      for (const signal of signals) {
        if (!(await this.checkExistingPosition(signal.symbol))) {
          validSignals.push(signal);
        } else {
          console.log(`üü° B·ªè qua ${signal.symbol} - ƒêang c√≥ v·ªã th·∫ø m·ªü`);
        }
      }

      // L·∫•y gi·ªõi h·∫°n l·ªánh m·ªói l·∫ßn qu√©t t·ª´ c·∫•u h√¨nh
      const orderSettings = this.stateManager.getOrdersState();
      const scanOrderLimit = orderSettings.orderLimitPerScan || 3;

      // Sort by strength and apply scanOrderLimit
      const filteredSignals = validSignals
        .sort((a, b) => b.strength - a.strength)
        .slice(0, scanOrderLimit);

      // Place orders for filtered signals and track results
      let successCount = 0;
      let errorCount = 0;
      const successfulSignals = []; // Track successfully executed signals

      for (const signal of filteredSignals) {
        console.log(`ƒêang th·ª±c hi·ªán ƒë·∫∑t l·ªánh cho: ${signal.symbol}`);
        const result = await this.placeOrder(signal);
        if (result) {
          successCount++;
          successfulSignals.push(signal);
        } else {
          errorCount++;
        }
      }

      // Remove successfully executed signals from store
      if (successfulSignals.length > 0) {
        const currentSignals = this.stateManager.getSignals();
        const successfulSignalIds = successfulSignals.map(s => s.id);
        const updatedSignals = currentSignals.filter(s => !successfulSignalIds.includes(s.id));
        this.stateManager.setSignals(updatedSignals);

        // Log removed signals
        for (const signal of successfulSignals) {
          this.stateManager.addLog({
            level: 'info',
            message: `ƒê√£ x√≥a t√≠n hi·ªáu ${signal.symbol} sau khi ƒë·∫∑t l·ªánh th√†nh c√¥ng`,
            type: 'signal_removed',
          });
        }
        console.log(`üóëÔ∏è ƒê√£ x√≥a ${successfulSignals.length} t√≠n hi·ªáu sau khi ƒë·∫∑t l·ªánh th√†nh c√¥ng`);
      }

      // Send summary notification
      if (successCount > 0 || errorCount > 0) {
        const summary = [];
        if (successCount > 0) {
          summary.push(`‚úÖ ${successCount} l·ªánh th√†nh c√¥ng`);
        }
        if (errorCount > 0) {
          summary.push(`‚ùå ${errorCount} l·ªánh l·ªói`);
        }
        this.sendNotification(
          `üìä K·∫øt qu·∫£ ƒë·∫∑t l·ªánh: ${summary.join(', ')}`,
          successCount > 0 ? 'success' : 'error'
        );
      }

      // Notify if signals were skipped due to scanOrderLimit
      if (validSignals.length > scanOrderLimit) {
        const skipped = validSignals.slice(scanOrderLimit).map(s => s.symbol);
        const skipMsg = `‚ö†Ô∏è V∆∞·ª£t gi·ªõi h·∫°n ${scanOrderLimit} l·ªánh/l·∫ßn, b·ªè qua: ${skipped.join(', ')}`;
        console.log(skipMsg);
        this.sendNotification(skipMsg, 'info');
      }
    } catch (error) {
      console.error('L·ªói trong qu√° tr√¨nh ƒë·∫∑t l·ªánh:', error);
      this.sendNotification(`‚ùå L·ªói khi th·ª±c thi l·ªánh: ${error.message}`, 'error');
    }
  }

  async start() {
    if (this.isRunning) {
      return;
    }
    this.isRunning = true;

    try {
      // Ki·ªÉm tra k·∫øt n·ªëi API
      const balanceData = await this.binanceService.getAccountBalance();
      if (!balanceData.success) {
        throw new Error(balanceData.error);
      }

      // Th·ª±c thi ngay l·∫≠p t·ª©c
      await this.execute();

      console.log('‚úÖ H·ªá th·ªëng ƒë·∫∑t l·ªánh ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng');
      return true;
    } catch (error) {
      this.isRunning = false;
      console.error('‚ùå L·ªói kh·ªüi ƒë·ªông h·ªá th·ªëng ƒë·∫∑t l·ªánh:', error);
      throw error;
    }
  }

  async stop() {
    if (!this.isRunning) {
      return;
    }
    this.isRunning = false;
    console.log('‚úÖ H·ªá th·ªëng ƒë·∫∑t l·ªánh ƒë√£ d·ª´ng');
  }
}

module.exports = Order;
